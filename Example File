# MCP Server Practical Examples

This file provides hands-on examples and demonstrations of using the GitHub MCP Server in real-world scenarios.

## Practical Demonstrations

### 1. File Operations
```bash
# Example of creating a file
POST /repos/:owner/:repo/contents/:path
{
    "message": "Created via MCP Server",
    "content": "base64_encoded_content"
}

# Example of updating a file
PUT /repos/:owner/:repo/contents/:path
{
    "message": "Updated via MCP Server",
    "content": "base64_encoded_content",
    "sha": "existing_file_sha"
}
```

### 2. Repository Actions
```bash
# Example of creating a repository
POST /user/repos
{
    "name": "new-repo",
    "description": "Created via MCP Server"
}

# Example of managing branches
POST /repos/:owner/:repo/git/refs
{
    "ref": "refs/heads/feature-branch",
    "sha": "base_commit_sha"
}
```

## Sample Code Snippets

### Python Example - Repository Creation
```python
import requests

def create_repo(name, token):
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    data = {
        'name': name,
        'auto_init': True
    }
    response = requests.post(
        'https://api.github.com/user/repos',
        json=data,
        headers=headers
    )
    return response.json()
```

### JavaScript Example - File Management
```javascript
async function updateFile(owner, repo, path, content, token) {
    const headers = {
        Authorization: `token ${token}`,
        Accept: 'application/vnd.github.v3+json'
    };
    
    // First get the file's SHA
    const fileResponse = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/contents/${path}`,
        { headers }
    );
    const fileData = await fileResponse.json();
    
    // Then update the file
    const updateResponse = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/contents/${path}`,
        {
            method: 'PUT',
            headers,
            body: JSON.stringify({
                message: 'Update file via MCP',
                content: Buffer.from(content).toString('base64'),
                sha: fileData.sha
            })
        }
    );
    return await updateResponse.json();
}
```

## Error Handling Examples

### Common Error Scenarios
1. Token Authentication Failure
```json
{
    "message": "Bad credentials",
    "documentation_url": "https://docs.github.com/rest"
}
```

2. Resource Not Found
```json
{
    "message": "Not Found",
    "documentation_url": "https://docs.github.com/rest/reference/repos#get-repository-content"
}
```

### Error Resolution Tips
1. Token Issues:
   - Verify token permissions
   - Check token expiration
   - Ensure proper environment variable setup

2. Resource Access:
   - Verify repository existence
   - Check path accuracy
   - Confirm access permissions

## Best Practices

### 1. Token Management
- Use environment variables
- Implement token rotation
- Set appropriate scopes
- Regular token audits

### 2. Error Handling
- Implement retry logic
- Log failed operations
- Provide meaningful error messages
- Handle rate limiting

### 3. Performance Optimization
- Batch operations when possible
- Cache frequently accessed data
- Use conditional requests
- Implement pagination

### 4. Security Considerations
- Validate input data
- Sanitize file contents
- Implement request signing
- Monitor access patterns

## Testing Examples

### 1. Connection Test
```bash
curl -H "Authorization: token ${GITHUB_TOKEN}" \
     -H "Accept: application/vnd.github.v3+json" \
     https://api.github.com/user
```

### 2. Repository Access Test
```bash
curl -H "Authorization: token ${GITHUB_TOKEN}" \
     -H "Accept: application/vnd.github.v3+json" \
     https://api.github.com/repos/${OWNER}/${REPO}
```

Created: May 27, 2025
Last Updated: May 27, 2025
Author: ManoharKonala

Note: This file contains practical examples and code snippets for working with the MCP Server. For general documentation and setup instructions, please refer to the README.md file.